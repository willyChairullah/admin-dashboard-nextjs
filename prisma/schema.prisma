generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categories {
  id          String     @id @default(cuid())
  name        String
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  code        String     @unique
  products    Products[]

  @@map("categories")
}

model Store {
  id          String       @id @default(cuid())
  name        String
  address     String
  city        String?
  phone       String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  fieldVisits FieldVisit[]
  orders      Orders[]

  @@map("stores")
}

model Customers {
  id             String           @id @default(cuid())
  name           String
  email          String?
  phone          String?
  address        String
  city           String
  latitude       Float?
  longitude      Float?
  creditLimit    Float            @default(0)
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  code           String           @unique
  customerVisits CustomerVisits[]
  deliveryNotes  DeliveryNotes[]
  invoices       Invoices[]
  orders         Orders[]

  @@map("customers")
}

model Products {
  id                   String                 @id @default(cuid())
  name                 String
  description          String?
  unit                 String
  price                Float
  cost                 Float
  minStock             Int                    @default(0)
  currentStock         Int                    @default(0)
  bottlesPerCrate      Int                    @default(24) // Jumlah botol per krat
  isActive             Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  categoryId           String
  code                 String                 @unique
  delivery_note_items  delivery_note_items[]
  invoiceItems         InvoiceItems[]
  ManagementStockItems ManagementStockItems[]
  orderItems           OrderItems[]
  ProductionItems      ProductionItems[]
  category             Categories             @relation(fields: [categoryId], references: [id])
  PurchaseOrderItems   PurchaseOrderItems[]
  salesReturnItems     SalesReturnItems[]
  stockMovements       StockMovements[]
  stockOpnameItems     StockOpnameItems[]

  @@map("products")
}

model Users {
  id                    String              @id @default(cuid())
  email                 String              @unique
  name                  String
  password              String
  role                  UserRole            @default(SALES)
  phone                 String?
  address               String?
  isActive              Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  userNotifications     UserNotifications[]
  ManagementStocks      ManagementStocks[]
  customerVisits        CustomerVisits[]
  PurchaseOrders        PurchaseOrders[]    @relation("CreatedPurchaseOrders")
  stockConfirmations    PurchaseOrders[]    @relation("StockConfirmationUser")
  stockMovements        StockMovements[]
  deliveryNotes         DeliveryNotes[]
  requestedSalesReturns SalesReturns[]      @relation("SalesRequester")
  processedSalesReturns SalesReturns[]      @relation("AdminProcessor")
  salesTargets          SalesTargets[]
  stockOpnames          StockOpnames[]
  transactions          Transactions[]
  Productions           Productions[]
  fieldVisits           FieldVisit[]
  InvoicesCreated       Invoices[]          @relation("InvoiceCreator")
  InvoicesUpdated       Invoices[]          @relation("InvoiceUpdater")
  Payments              Payments[]
  orders                Orders[]
  ExpensesCreated       Expenses[]          @relation("ExpenseCreator")
  ExpensesUpdated       Expenses[]          @relation("ExpenseUpdater")
  deliveries            Deliveries[]

  @@map("users")
}

model SalesTargets {
  id             String     @id @default(cuid())
  userId         String
  targetType     TargetType @default(MONTHLY)
  targetPeriod   String
  targetAmount   Float
  achievedAmount Float      @default(0)
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  user           Users      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, targetPeriod])
  @@map("sales_targets")
}

model CompanyTargets {
  id             String     @id @default(cuid())
  targetType     TargetType @default(MONTHLY)
  targetPeriod   String
  targetAmount   Float
  achievedAmount Float      @default(0)
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@unique([targetPeriod, targetType])
  @@map("company_targets")
}

model PurchaseOrders {
  id                      String                  @id @default(cuid())
  poDate                  DateTime                @default(now())
  status                  PurchaseOrderStatus     @default(PENDING)
  notes                   String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  creatorId               String
  dateline                DateTime                @default(now())
  code                    String                  @unique
  totalAmount             Float                   @default(0)
  dateStockConfirmation   DateTime?
  notesStockConfirmation  String?
  statusStockConfirmation StockConfirmationStatus @default(WAITING_CONFIRMATION)
  userStockConfirmationId String?
  orderId                 String
  orderLevelDiscount      Float                   @default(0)
  orderLevelDiscountType  DiscountValueType       @default(AMOUNT)
  paymentDeadline         DateTime?
  paymentMethod           String? // Net Pembayaran sebagai text
  shippingCost            Float                   @default(0)
  taxPercentage           Float                   @default(0)
  totalDiscount           Float                   @default(0)
  totalPayment            Float                   @default(0)
  totalTax                Float                   @default(0)
  invoices                Invoices?
  items                   PurchaseOrderItems[]
  creator                 Users                   @relation("CreatedPurchaseOrders", fields: [creatorId], references: [id])
  order                   Orders                  @relation(fields: [orderId], references: [id])
  stockConfirmationUser   Users?                  @relation("StockConfirmationUser", fields: [userStockConfirmationId], references: [id])

  @@map("purchase_orders")
}

model PurchaseOrderItems {
  id              String            @id @default(cuid())
  quantity        Float
  purchaseOrderId String
  productId       String
  price           Float             @default(0)
  totalPrice      Float             @default(0)
  discount        Float             @default(0)
  discountType    DiscountValueType @default(AMOUNT)
  product         Products          @relation(fields: [productId], references: [id])
  purchaseOrder   PurchaseOrders    @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  @@map("purchase_order_items")
}

model Orders {
  id                   String        @id @default(cuid())
  orderNumber          String        @unique
  orderDate            DateTime      @default(now())
  deliveryDate         DateTime?
  status               OrderStatus   @default(NEW)
  totalAmount          Float         @default(0)
  notes                String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  customerId           String
  salesId              String
  adminNotes           String?
  canceledAt           DateTime?
  completedAt          DateTime?
  confirmedAt          DateTime?
  confirmedBy          String?
  requiresConfirmation Boolean       @default(false)
  deliveryAddress      String
  deliveryCity         String?
  deliveryNotesOrder   String?
  deliveryPostalCode   String?
  discount             Float         @default(0)
  shippingCost         Float         @default(0)
  dueDate              DateTime
  discountType         DiscountType? @default(OVERALL)
  paymentDeadline      DateTime?

  // Fields yang diperlukan untuk form order
  storeId       String?
  paymentType   PaymentType  @default(IMMEDIATE)
  discountUnit  DiscountUnit @default(AMOUNT)
  totalDiscount Float        @default(0)
  subtotal      Float        @default(0)

  purchaseOrders PurchaseOrders[]
  StockMovements StockMovements[]
  salesReturns   SalesReturns[]
  orderItems     OrderItems[]
  sales          Users            @relation(fields: [salesId], references: [id])
  store          Store?           @relation(fields: [storeId], references: [id])
  customer       Customers        @relation(fields: [customerId], references: [id])

  @@map("orders")
}

model OrderItems {
  id           String        @id @default(cuid())
  quantity     Float
  price        Float
  totalPrice   Float
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  orderId      String
  productId    String
  discount     Float         @default(0)
  discountType DiscountUnit? @default(AMOUNT)
  orders       Orders        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  products     Products      @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model DeliveryNotes {
  id                  String                @id @default(cuid())
  code                String                @unique
  deliveryDate        DateTime              @default(now())
  status              DeliveryStatus        @default(PENDING)
  driverName          String
  vehicleNumber       String
  notes               String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  customerId          String
  warehouseUserId     String
  deliveryAddress     String?
  deliveryCity        String?
  deliveryPostalCode  String?
  invoiceId           String                @unique
  delivery_note_items delivery_note_items[]
  stock_movements     StockMovements[]
  invoices            Invoices              @relation(fields: [invoiceId], references: [id])
  customers           Customers             @relation(fields: [customerId], references: [id])
  users               Users                 @relation(fields: [warehouseUserId], references: [id])

  @@map("delivery_notes")
}

model Invoices {
  id                String            @id @default(cuid())
  code              String            @unique
  invoiceDate       DateTime          @default(now())
  dueDate           DateTime?
  status            InvoiceStatus     @default(DRAFT)
  subtotal          Float             @default(0)
  tax               Float             @default(0)
  totalAmount       Float             @default(0)
  paidAmount        Float             @default(0)
  remainingAmount   Float             @default(0)
  notes             String?
  customerId        String?
  discount          Float             @default(0)
  discountType      DiscountValueType @default(AMOUNT)
  paymentStatus     PaymentStatus     @default(UNPAID)
  updatedBy         String?
  purchaseOrderId   String?           @unique
  deliveryAddress   String?
  shippingCost      Float             @default(0)
  taxPercentage     Float             @default(0)
  type              InvoiceType       @default(PRODUCT)
  statusPreparation PreparationStatus @default(WAITING_PREPARATION)
  useDeliveryNote   Boolean           @default(false)

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  createdBy         String?
  delivery_notes    DeliveryNotes?
  deliveries        Deliveries?
  payments          Payments[]
  salesReturns      SalesReturns[]
  invoiceItems      InvoiceItems[]
  customer          Customers?        @relation(fields: [customerId], references: [id])
  purchaseOrder     PurchaseOrders?   @relation(fields: [purchaseOrderId], references: [id])
  creator           Users?            @relation("InvoiceCreator", fields: [createdBy], references: [id])
  updater           Users?            @relation("InvoiceUpdater", fields: [updatedBy], references: [id])

  @@map("invoices")
}

model InvoiceItems {
  id          String            @id @default(cuid())
  quantity    Float
  price       Float
  totalPrice  Float
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  invoiceId   String
  productId   String
  discount    Float             @default(0)
  discountType DiscountValueType @default(AMOUNT)
  invoices    Invoices          @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  products    Products          @relation(fields: [productId], references: [id])

  @@map("invoice_items")
}

model Payments {
  paymentDate DateTime   @default(now())
  amount      Float
  notes       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  invoiceId   String
  id          String     @id @default(cuid())
  method      String
  reference   String?
  paymentCode String     @unique
  proofUrl    String?
  status      PaidStatus @default(PENDING)
  userId      String
  invoice     Invoices   @relation(fields: [invoiceId], references: [id])
  user        Users      @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Transactions {
  id               String             @id @default(cuid())
  transactionDate  DateTime           @default(now())
  type             TransactionType
  amount           Float
  description      String
  category         String
  reference        String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  userId           String?
  transactionItems TransactionItems[]
  user             Users?             @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model TransactionItems {
  id            String       @id @default(cuid())
  description   String
  quantity      Float
  price         Float
  totalPrice    Float
  transactionId String
  transaction   Transactions @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("transaction_items")
}

model StockMovements {
  id                     String                @id @default(cuid())
  movementDate           DateTime              @default(now())
  type                   StockMovementType
  quantity               Float
  previousStock          Int
  newStock               Int
  reference              String?
  notes                  String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  productId              String
  userId                 String
  ordersId               String?
  ManagementStockItemsId String?
  stockOpnameItemId      String?
  productionItemsId      String?
  deliveryNoteId         String?
  deliveryNoteItemId     String?
  managementStockItemId  ManagementStockItems? @relation(fields: [ManagementStockItemsId], references: [id])
  delivery_notes         DeliveryNotes?        @relation(fields: [deliveryNoteId], references: [id])
  delivery_note_items    delivery_note_items?  @relation(fields: [deliveryNoteItemId], references: [id])
  orderId                Orders?               @relation(fields: [ordersId], references: [id])
  products               Products              @relation(fields: [productId], references: [id])
  productionLogItemId    ProductionItems?      @relation(fields: [productionItemsId], references: [id])
  stockOpnameItem        StockOpnameItems?     @relation(fields: [stockOpnameItemId], references: [id], onDelete: Cascade)
  users                  Users                 @relation(fields: [userId], references: [id])

  @@map("stock_movements")
}

model StockOpnames {
  id               String             @id @default(cuid())
  opnameDate       DateTime           @default(now())
  status           OpnameStatus       @default(RECONCILED)
  notes            String?
  conductedById    String
  code             String             @unique
  ManagementStocks ManagementStocks[]
  stockOpnameItems StockOpnameItems[]
  conductedBy      Users              @relation(fields: [conductedById], references: [id])

  @@map("stock_opnames")
}

model StockOpnameItems {
  id             String           @id @default(cuid())
  systemStock    Int
  physicalStock  Int
  difference     Int
  opnameId       String
  productId      String
  notes          String?
  StockMovements StockMovements[]
  stockOpname    StockOpnames     @relation(fields: [opnameId], references: [id], onDelete: Cascade)
  product        Products         @relation(fields: [productId], references: [id])

  @@map("stock_opname_items")
}

model SalesReturns {
  id               String             @id @default(cuid())
  returnDate       DateTime           @default(now())
  reason           String
  status           ReturnStatus       @default(REQUESTED)
  notes            String?
  orderId          String?
  invoiceId        String
  requesterId      String
  processorId      String?
  salesReturnItems SalesReturnItems[]
  invoice          Invoices           @relation(fields: [invoiceId], references: [id])
  order            Orders?            @relation(fields: [orderId], references: [id])
  processor        Users?             @relation("AdminProcessor", fields: [processorId], references: [id])
  requester        Users              @relation("SalesRequester", fields: [requesterId], references: [id])

  @@map("sales_returns")
}

model SalesReturnItems {
  id          String       @id @default(cuid())
  quantity    Float
  returnId    String
  productId   String
  product     Products     @relation(fields: [productId], references: [id])
  salesReturn SalesReturns @relation(fields: [returnId], references: [id], onDelete: Cascade)

  @@map("sales_return_items")
}

model Productions {
  id             String            @id @default(cuid())
  productionDate DateTime          @default(now())
  status         ProductionStatus  @default(COMPLETED)
  notes          String?
  producedById   String
  code           String            @unique
  items          ProductionItems[]
  producedBy     Users             @relation(fields: [producedById], references: [id])

  @@map("production_logs")
}

model ProductionItems {
  id              String           @id @default(cuid())
  quantity        Float
  productionLogId String
  productId       String
  notes           String?
  salaryPerBottle Float            @default(0) // Gaji per botol untuk item ini
  product         Products         @relation(fields: [productId], references: [id])
  productionLog   Productions      @relation(fields: [productionLogId], references: [id], onDelete: Cascade)
  StockMovements  StockMovements[]

  @@map("production_log_items")
}

model ManagementStocks {
  id             String                 @id @default(cuid())
  managementDate DateTime               @default(now())
  notes          String?
  producedById   String
  status         ManagementStockStatus  @default(IN)
  stockOpnameId  String?
  code           String                 @unique
  items          ManagementStockItems[]
  producedBy     Users                  @relation(fields: [producedById], references: [id])
  stockOpname    StockOpnames?          @relation(fields: [stockOpnameId], references: [id], onDelete: Cascade)

  @@map("management_stocks")
}

model ManagementStockItems {
  id                String           @id @default(cuid())
  quantity          Float
  managementStockId String
  productId         String
  stockOpnamesId    String?
  notes             String?
  managementStock   ManagementStocks @relation(fields: [managementStockId], references: [id], onDelete: Cascade)
  product           Products         @relation(fields: [productId], references: [id])
  StockMovements    StockMovements[]

  @@map("management_stock_items")
}

model FieldVisit {
  id           String    @id @default(cuid())
  storeId      String?
  storeName    String?
  storeAddress String?
  visitDate    DateTime  @default(now())
  checkInTime  DateTime  @default(now())
  checkOutTime DateTime?
  latitude     Float
  longitude    Float
  photos       String[]  @default([])
  notes        String?
  visitPurpose String
  result       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  salesId      String
  sales        Users     @relation(fields: [salesId], references: [id], onDelete: Cascade)
  store        Store?    @relation(fields: [storeId], references: [id])

  @@map("field_visits")
}

model CustomerVisits {
  id         String    @id @default(cuid())
  visitDate  DateTime  @default(now())
  latitude   Float
  longitude  Float
  notes      String?
  photoUrl   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  customerId String
  salesId    String
  customers  Customers @relation(fields: [customerId], references: [id])
  users      Users     @relation(fields: [salesId], references: [id])

  @@map("customer_visits")
}

model Settings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

model Notifications {
  id                String              @id @default(cuid())
  title             String
  message           String
  type              String
  isGlobal          Boolean             @default(false)
  isRead            Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  userNotifications UserNotifications[]

  @@map("notifications")
}

model UserNotifications {
  id             String        @id @default(cuid())
  isRead         Boolean       @default(false)
  readAt         DateTime?
  createdAt      DateTime      @default(now())
  userId         String
  notificationId String
  notifications  Notifications @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  users          Users         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationId])
  @@map("user_notifications")
}

model delivery_note_items {
  id              String           @id
  quantity        Float
  deliveredQty    Float            @default(0)
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  deliveryNoteId  String
  productId       String
  delivery_notes  DeliveryNotes    @relation(fields: [deliveryNoteId], references: [id], onDelete: Cascade)
  products        Products         @relation(fields: [productId], references: [id])
  stock_movements StockMovements[]
}

model Taxs {
  id        String   @id @default(cuid())
  nominal   String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("taxes")
}

enum PreparationStatus {
  WAITING_PREPARATION
  PREPARING
  CANCELLED_PREPARATION
  READY_FOR_DELIVERY
}

enum StockConfirmationStatus {
  WAITING_CONFIRMATION
  STOCK_AVAILABLE
  INSUFFICIENT_STOCK
  CONFIRMED
  REJECTED
}

enum PaymentType {
  IMMEDIATE
  DEFERRED
}

enum DiscountUnit {
  AMOUNT
  PERCENTAGE
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  RETURNED
  CANCELLED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum InvoiceType {
  PRODUCT
}

enum PaymentStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
  OVERPAID
}

enum PaidStatus {
  PENDING
  CLEARED
  CANCELED
}

enum OrderStatus {
  NEW
  PROCESSING
  COMPLETED
  CANCELLED
  PENDING_CONFIRMATION
  IN_PROCESS
  CANCELED
}

enum StockMovementType {
  PRODUCTION_IN
  SALES_OUT
  RETURN_IN
  ADJUSTMENT_IN
  ADJUSTMENT_OUT
  OPNAME_ADJUSTMENT
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum UserRole {
  OWNER
  ADMIN
  SALES
  WAREHOUSE
  HELPER
}

enum ReturnStatus {
  REQUESTED
  APPROVED
  REJECTED
  COMPLETED
}

enum OpnameStatus {
  IN_PROGRESS
  COMPLETED
  RECONCILED
}

enum TargetType {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum ProductionStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ManagementStockStatus {
  IN
  OUT
  OPNAME_ADJUSTMENT
}

enum PurchaseOrderStatus {
  PENDING
  PROCESSING
  READY_FOR_DELIVERY
  COMPLETED
  CANCELLED
}

enum DiscountType {
  PER_CRATE
  OVERALL
}

enum DiscountValueType {
  AMOUNT
  PERCENTAGE
}

model Expenses {
  id           String            @id @default(cuid())
  code         String            @unique
  expenseDate  DateTime          @default(now())
  dueDate      DateTime?
  status       InvoiceStatus     @default(DRAFT)
  subtotal     Float             @default(0)
  tax          Float             @default(0)
  taxPercentage Float            @default(0)
  discount     Float             @default(0)
  discountType DiscountValueType @default(AMOUNT)
  shippingCost Float             @default(0)
  totalAmount  Float             @default(0)
  notes        String?
  createdBy    String?
  updatedBy    String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  
  expenseItems ExpenseItems[]
  creator      Users?            @relation("ExpenseCreator", fields: [createdBy], references: [id])
  updater      Users?            @relation("ExpenseUpdater", fields: [updatedBy], references: [id])

  @@map("expenses")
}

model ExpenseItems {
  id           String            @id @default(cuid())
  description  String
  quantity     Float
  price        Float
  discount     Float             @default(0)
  discountType DiscountValueType @default(AMOUNT)
  totalPrice   Float
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  expenseId    String
  
  expense      Expenses          @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@map("expense_items")
}

model Deliveries {
  id              String          @id @default(cuid())
  code            String          @unique
  invoiceId       String          @unique
  helperId        String
  deliveryDate    DateTime        @default(now())
  status          DeliveryStatus  @default(PENDING)
  completedAt     DateTime?
  notes           String?
  returnReason    String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  invoice         Invoices        @relation(fields: [invoiceId], references: [id])
  helper          Users           @relation(fields: [helperId], references: [id])

  @@map("deliveries")
}